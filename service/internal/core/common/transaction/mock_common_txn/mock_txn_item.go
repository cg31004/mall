// Code generated by mockery v2.12.0. DO NOT EDIT.

package mock_common_txn

import (
	context "context"
	bo "simon/mall/service/internal/model/bo"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockTxnItemCommon is an autogenerated mock type for the ITxnItemCommon type
type MockTxnItemCommon struct {
	mock.Mock
}

type MockTxnItemCommon_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTxnItemCommon) EXPECT() *MockTxnItemCommon_Expecter {
	return &MockTxnItemCommon_Expecter{mock: &_m.Mock}
}

// DeleteTxnItem provides a mock function with given fields: ctx, cond
func (_m *MockTxnItemCommon) DeleteTxnItem(ctx context.Context, cond *bo.DelTxnItemMapCond) {
	_m.Called(ctx, cond)
}

// MockTxnItemCommon_DeleteTxnItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTxnItem'
type MockTxnItemCommon_DeleteTxnItem_Call struct {
	*mock.Call
}

// DeleteTxnItem is a helper method to define mock.On call
//  - ctx context.Context
//  - cond *bo.DelTxnItemMapCond
func (_e *MockTxnItemCommon_Expecter) DeleteTxnItem(ctx interface{}, cond interface{}) *MockTxnItemCommon_DeleteTxnItem_Call {
	return &MockTxnItemCommon_DeleteTxnItem_Call{Call: _e.mock.On("DeleteTxnItem", ctx, cond)}
}

func (_c *MockTxnItemCommon_DeleteTxnItem_Call) Run(run func(ctx context.Context, cond *bo.DelTxnItemMapCond)) *MockTxnItemCommon_DeleteTxnItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*bo.DelTxnItemMapCond))
	})
	return _c
}

func (_c *MockTxnItemCommon_DeleteTxnItem_Call) Return() *MockTxnItemCommon_DeleteTxnItem_Call {
	_c.Call.Return()
	return _c
}

// GetTxnItem provides a mock function with given fields: ctx, cond
func (_m *MockTxnItemCommon) GetTxnItem(ctx context.Context, cond *bo.GetTxnItemMapCond) (map[string][]*bo.TxnItem, error) {
	ret := _m.Called(ctx, cond)

	var r0 map[string][]*bo.TxnItem
	if rf, ok := ret.Get(0).(func(context.Context, *bo.GetTxnItemMapCond) map[string][]*bo.TxnItem); ok {
		r0 = rf(ctx, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]*bo.TxnItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bo.GetTxnItemMapCond) error); ok {
		r1 = rf(ctx, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxnItemCommon_GetTxnItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxnItem'
type MockTxnItemCommon_GetTxnItem_Call struct {
	*mock.Call
}

// GetTxnItem is a helper method to define mock.On call
//  - ctx context.Context
//  - cond *bo.GetTxnItemMapCond
func (_e *MockTxnItemCommon_Expecter) GetTxnItem(ctx interface{}, cond interface{}) *MockTxnItemCommon_GetTxnItem_Call {
	return &MockTxnItemCommon_GetTxnItem_Call{Call: _e.mock.On("GetTxnItem", ctx, cond)}
}

func (_c *MockTxnItemCommon_GetTxnItem_Call) Run(run func(ctx context.Context, cond *bo.GetTxnItemMapCond)) *MockTxnItemCommon_GetTxnItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*bo.GetTxnItemMapCond))
	})
	return _c
}

func (_c *MockTxnItemCommon_GetTxnItem_Call) Return(_a0 map[string][]*bo.TxnItem, _a1 error) *MockTxnItemCommon_GetTxnItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewMockTxnItemCommon creates a new instance of MockTxnItemCommon. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTxnItemCommon(t testing.TB) *MockTxnItemCommon {
	mock := &MockTxnItemCommon{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
