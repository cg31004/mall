// Code generated by mockery v2.12.0. DO NOT EDIT.

package mock_common_product

import (
	context "context"
	bo "simon/mall/service/internal/model/bo"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockProductCommon is an autogenerated mock type for the IProductCommon type
type MockProductCommon struct {
	mock.Mock
}

type MockProductCommon_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductCommon) EXPECT() *MockProductCommon_Expecter {
	return &MockProductCommon_Expecter{mock: &_m.Mock}
}

// DeleteProductCache provides a mock function with given fields: ctx
func (_m *MockProductCommon) DeleteProductCache(ctx context.Context) {
	_m.Called(ctx)
}

// MockProductCommon_DeleteProductCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProductCache'
type MockProductCommon_DeleteProductCache_Call struct {
	*mock.Call
}

// DeleteProductCache is a helper method to define mock.On call
//  - ctx context.Context
func (_e *MockProductCommon_Expecter) DeleteProductCache(ctx interface{}) *MockProductCommon_DeleteProductCache_Call {
	return &MockProductCommon_DeleteProductCache_Call{Call: _e.mock.On("DeleteProductCache", ctx)}
}

func (_c *MockProductCommon_DeleteProductCache_Call) Run(run func(ctx context.Context)) *MockProductCommon_DeleteProductCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProductCommon_DeleteProductCache_Call) Return() *MockProductCommon_DeleteProductCache_Call {
	_c.Call.Return()
	return _c
}

// GetProduct provides a mock function with given fields: ctx
func (_m *MockProductCommon) GetProduct(ctx context.Context) (map[string]*bo.ProductCommon, error) {
	ret := _m.Called(ctx)

	var r0 map[string]*bo.ProductCommon
	if rf, ok := ret.Get(0).(func(context.Context) map[string]*bo.ProductCommon); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*bo.ProductCommon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductCommon_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type MockProductCommon_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//  - ctx context.Context
func (_e *MockProductCommon_Expecter) GetProduct(ctx interface{}) *MockProductCommon_GetProduct_Call {
	return &MockProductCommon_GetProduct_Call{Call: _e.mock.On("GetProduct", ctx)}
}

func (_c *MockProductCommon_GetProduct_Call) Run(run func(ctx context.Context)) *MockProductCommon_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProductCommon_GetProduct_Call) Return(_a0 map[string]*bo.ProductCommon, _a1 error) *MockProductCommon_GetProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewMockProductCommon creates a new instance of MockProductCommon. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockProductCommon(t testing.TB) *MockProductCommon {
	mock := &MockProductCommon{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
