// Code generated by mockery v2.12.0. DO NOT EDIT.

package mock_redis

import (
	context "context"

	redis "github.com/go-redis/redis/v8"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	time "time"
)

// MockRedisClient is an autogenerated mock type for the IRedisClient type
type MockRedisClient struct {
	mock.Mock
}

type MockRedisClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRedisClient) EXPECT() *MockRedisClient_Expecter {
	return &MockRedisClient_Expecter{mock: &_m.Mock}
}

// AddToSet provides a mock function with given fields: ctx, key, values
func (_m *MockRedisClient) AddToSet(ctx context.Context, key string, values ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) error); ok {
		r0 = rf(ctx, key, values...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_AddToSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToSet'
type MockRedisClient_AddToSet_Call struct {
	*mock.Call
}

// AddToSet is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - values ...interface{}
func (_e *MockRedisClient_Expecter) AddToSet(ctx interface{}, key interface{}, values ...interface{}) *MockRedisClient_AddToSet_Call {
	return &MockRedisClient_AddToSet_Call{Call: _e.mock.On("AddToSet",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockRedisClient_AddToSet_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *MockRedisClient_AddToSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockRedisClient_AddToSet_Call) Return(_a0 error) *MockRedisClient_AddToSet_Call {
	_c.Call.Return(_a0)
	return _c
}

// AddToSortedSet provides a mock function with given fields: ctx, key, score, value
func (_m *MockRedisClient) AddToSortedSet(ctx context.Context, key string, score float64, value interface{}) error {
	ret := _m.Called(ctx, key, score, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, interface{}) error); ok {
		r0 = rf(ctx, key, score, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_AddToSortedSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToSortedSet'
type MockRedisClient_AddToSortedSet_Call struct {
	*mock.Call
}

// AddToSortedSet is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - score float64
//  - value interface{}
func (_e *MockRedisClient_Expecter) AddToSortedSet(ctx interface{}, key interface{}, score interface{}, value interface{}) *MockRedisClient_AddToSortedSet_Call {
	return &MockRedisClient_AddToSortedSet_Call{Call: _e.mock.On("AddToSortedSet", ctx, key, score, value)}
}

func (_c *MockRedisClient_AddToSortedSet_Call) Run(run func(ctx context.Context, key string, score float64, value interface{})) *MockRedisClient_AddToSortedSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64), args[3].(interface{}))
	})
	return _c
}

func (_c *MockRedisClient_AddToSortedSet_Call) Return(_a0 error) *MockRedisClient_AddToSortedSet_Call {
	_c.Call.Return(_a0)
	return _c
}

// CheckIfKeyExists provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) CheckIfKeyExists(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_CheckIfKeyExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfKeyExists'
type MockRedisClient_CheckIfKeyExists_Call struct {
	*mock.Call
}

// CheckIfKeyExists is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *MockRedisClient_Expecter) CheckIfKeyExists(ctx interface{}, key interface{}) *MockRedisClient_CheckIfKeyExists_Call {
	return &MockRedisClient_CheckIfKeyExists_Call{Call: _e.mock.On("CheckIfKeyExists", ctx, key)}
}

func (_c *MockRedisClient_CheckIfKeyExists_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_CheckIfKeyExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisClient_CheckIfKeyExists_Call) Return(_a0 bool, _a1 error) *MockRedisClient_CheckIfKeyExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CheckInSet provides a mock function with given fields: ctx, key, value
func (_m *MockRedisClient) CheckInSet(ctx context.Context, key string, value interface{}) (bool, error) {
	ret := _m.Called(ctx, key, value)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) bool); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_CheckInSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckInSet'
type MockRedisClient_CheckInSet_Call struct {
	*mock.Call
}

// CheckInSet is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - value interface{}
func (_e *MockRedisClient_Expecter) CheckInSet(ctx interface{}, key interface{}, value interface{}) *MockRedisClient_CheckInSet_Call {
	return &MockRedisClient_CheckInSet_Call{Call: _e.mock.On("CheckInSet", ctx, key, value)}
}

func (_c *MockRedisClient_CheckInSet_Call) Run(run func(ctx context.Context, key string, value interface{})) *MockRedisClient_CheckInSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockRedisClient_CheckInSet_Call) Return(_a0 bool, _a1 error) *MockRedisClient_CheckInSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CheckInSortedSet provides a mock function with given fields: ctx, key, value
func (_m *MockRedisClient) CheckInSortedSet(ctx context.Context, key string, value string) (bool, error) {
	ret := _m.Called(ctx, key, value)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_CheckInSortedSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckInSortedSet'
type MockRedisClient_CheckInSortedSet_Call struct {
	*mock.Call
}

// CheckInSortedSet is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - value string
func (_e *MockRedisClient_Expecter) CheckInSortedSet(ctx interface{}, key interface{}, value interface{}) *MockRedisClient_CheckInSortedSet_Call {
	return &MockRedisClient_CheckInSortedSet_Call{Call: _e.mock.On("CheckInSortedSet", ctx, key, value)}
}

func (_c *MockRedisClient_CheckInSortedSet_Call) Run(run func(ctx context.Context, key string, value string)) *MockRedisClient_CheckInSortedSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRedisClient_CheckInSortedSet_Call) Return(_a0 bool, _a1 error) *MockRedisClient_CheckInSortedSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Decrease provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) Decrease(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_Decrease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrease'
type MockRedisClient_Decrease_Call struct {
	*mock.Call
}

// Decrease is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *MockRedisClient_Expecter) Decrease(ctx interface{}, key interface{}) *MockRedisClient_Decrease_Call {
	return &MockRedisClient_Decrease_Call{Call: _e.mock.On("Decrease", ctx, key)}
}

func (_c *MockRedisClient_Decrease_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_Decrease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisClient_Decrease_Call) Return(_a0 int64, _a1 error) *MockRedisClient_Decrease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllInSet provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) GetAllInSet(ctx context.Context, key string) ([]string, error) {
	ret := _m.Called(ctx, key)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_GetAllInSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllInSet'
type MockRedisClient_GetAllInSet_Call struct {
	*mock.Call
}

// GetAllInSet is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *MockRedisClient_Expecter) GetAllInSet(ctx interface{}, key interface{}) *MockRedisClient_GetAllInSet_Call {
	return &MockRedisClient_GetAllInSet_Call{Call: _e.mock.On("GetAllInSet", ctx, key)}
}

func (_c *MockRedisClient_GetAllInSet_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_GetAllInSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisClient_GetAllInSet_Call) Return(_a0 []string, _a1 error) *MockRedisClient_GetAllInSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllInSortedSet provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) GetAllInSortedSet(ctx context.Context, key string) ([]string, error) {
	ret := _m.Called(ctx, key)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_GetAllInSortedSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllInSortedSet'
type MockRedisClient_GetAllInSortedSet_Call struct {
	*mock.Call
}

// GetAllInSortedSet is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *MockRedisClient_Expecter) GetAllInSortedSet(ctx interface{}, key interface{}) *MockRedisClient_GetAllInSortedSet_Call {
	return &MockRedisClient_GetAllInSortedSet_Call{Call: _e.mock.On("GetAllInSortedSet", ctx, key)}
}

func (_c *MockRedisClient_GetAllInSortedSet_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_GetAllInSortedSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisClient_GetAllInSortedSet_Call) Return(_a0 []string, _a1 error) *MockRedisClient_GetAllInSortedSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllInSortedSetWithScores provides a mock function with given fields: ctx, key, start, end
func (_m *MockRedisClient) GetAllInSortedSetWithScores(ctx context.Context, key string, start int64, end int64) ([]string, error) {
	ret := _m.Called(ctx, key, start, end)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) []string); ok {
		r0 = rf(ctx, key, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, key, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_GetAllInSortedSetWithScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllInSortedSetWithScores'
type MockRedisClient_GetAllInSortedSetWithScores_Call struct {
	*mock.Call
}

// GetAllInSortedSetWithScores is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - start int64
//  - end int64
func (_e *MockRedisClient_Expecter) GetAllInSortedSetWithScores(ctx interface{}, key interface{}, start interface{}, end interface{}) *MockRedisClient_GetAllInSortedSetWithScores_Call {
	return &MockRedisClient_GetAllInSortedSetWithScores_Call{Call: _e.mock.On("GetAllInSortedSetWithScores", ctx, key, start, end)}
}

func (_c *MockRedisClient_GetAllInSortedSetWithScores_Call) Run(run func(ctx context.Context, key string, start int64, end int64)) *MockRedisClient_GetAllInSortedSetWithScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockRedisClient_GetAllInSortedSetWithScores_Call) Return(_a0 []string, _a1 error) *MockRedisClient_GetAllInSortedSetWithScores_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetJSON provides a mock function with given fields: ctx, key, val
func (_m *MockRedisClient) GetJSON(ctx context.Context, key string, val interface{}) error {
	ret := _m.Called(ctx, key, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_GetJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJSON'
type MockRedisClient_GetJSON_Call struct {
	*mock.Call
}

// GetJSON is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - val interface{}
func (_e *MockRedisClient_Expecter) GetJSON(ctx interface{}, key interface{}, val interface{}) *MockRedisClient_GetJSON_Call {
	return &MockRedisClient_GetJSON_Call{Call: _e.mock.On("GetJSON", ctx, key, val)}
}

func (_c *MockRedisClient_GetJSON_Call) Run(run func(ctx context.Context, key string, val interface{})) *MockRedisClient_GetJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockRedisClient_GetJSON_Call) Return(_a0 error) *MockRedisClient_GetJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetJSONWithMultiKeys provides a mock function with given fields: ctx, val, keys
func (_m *MockRedisClient) GetJSONWithMultiKeys(ctx context.Context, val interface{}, keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, val)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...string) error); ok {
		r0 = rf(ctx, val, keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_GetJSONWithMultiKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJSONWithMultiKeys'
type MockRedisClient_GetJSONWithMultiKeys_Call struct {
	*mock.Call
}

// GetJSONWithMultiKeys is a helper method to define mock.On call
//  - ctx context.Context
//  - val interface{}
//  - keys ...string
func (_e *MockRedisClient_Expecter) GetJSONWithMultiKeys(ctx interface{}, val interface{}, keys ...interface{}) *MockRedisClient_GetJSONWithMultiKeys_Call {
	return &MockRedisClient_GetJSONWithMultiKeys_Call{Call: _e.mock.On("GetJSONWithMultiKeys",
		append([]interface{}{ctx, val}, keys...)...)}
}

func (_c *MockRedisClient_GetJSONWithMultiKeys_Call) Run(run func(ctx context.Context, val interface{}, keys ...string)) *MockRedisClient_GetJSONWithMultiKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockRedisClient_GetJSONWithMultiKeys_Call) Return(_a0 error) *MockRedisClient_GetJSONWithMultiKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetSetCount provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) GetSetCount(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_GetSetCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSetCount'
type MockRedisClient_GetSetCount_Call struct {
	*mock.Call
}

// GetSetCount is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *MockRedisClient_Expecter) GetSetCount(ctx interface{}, key interface{}) *MockRedisClient_GetSetCount_Call {
	return &MockRedisClient_GetSetCount_Call{Call: _e.mock.On("GetSetCount", ctx, key)}
}

func (_c *MockRedisClient_GetSetCount_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_GetSetCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisClient_GetSetCount_Call) Return(_a0 int64, _a1 error) *MockRedisClient_GetSetCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetString provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) GetString(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type MockRedisClient_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *MockRedisClient_Expecter) GetString(ctx interface{}, key interface{}) *MockRedisClient_GetString_Call {
	return &MockRedisClient_GetString_Call{Call: _e.mock.On("GetString", ctx, key)}
}

func (_c *MockRedisClient_GetString_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisClient_GetString_Call) Return(_a0 string, _a1 error) *MockRedisClient_GetString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// HGet provides a mock function with given fields: ctx, key, field
func (_m *MockRedisClient) HGet(ctx context.Context, key string, field string) (string, error) {
	ret := _m.Called(ctx, key, field)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, key, field)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, key, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_HGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HGet'
type MockRedisClient_HGet_Call struct {
	*mock.Call
}

// HGet is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - field string
func (_e *MockRedisClient_Expecter) HGet(ctx interface{}, key interface{}, field interface{}) *MockRedisClient_HGet_Call {
	return &MockRedisClient_HGet_Call{Call: _e.mock.On("HGet", ctx, key, field)}
}

func (_c *MockRedisClient_HGet_Call) Run(run func(ctx context.Context, key string, field string)) *MockRedisClient_HGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRedisClient_HGet_Call) Return(_a0 string, _a1 error) *MockRedisClient_HGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// HMGet provides a mock function with given fields: ctx, key, values
func (_m *MockRedisClient) HMGet(ctx context.Context, key string, values []string) (map[string]string, error) {
	ret := _m.Called(ctx, key, values)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) map[string]string); ok {
		r0 = rf(ctx, key, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, key, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_HMGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HMGet'
type MockRedisClient_HMGet_Call struct {
	*mock.Call
}

// HMGet is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - values []string
func (_e *MockRedisClient_Expecter) HMGet(ctx interface{}, key interface{}, values interface{}) *MockRedisClient_HMGet_Call {
	return &MockRedisClient_HMGet_Call{Call: _e.mock.On("HMGet", ctx, key, values)}
}

func (_c *MockRedisClient_HMGet_Call) Run(run func(ctx context.Context, key string, values []string)) *MockRedisClient_HMGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockRedisClient_HMGet_Call) Return(_a0 map[string]string, _a1 error) *MockRedisClient_HMGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Increase provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) Increase(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_Increase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increase'
type MockRedisClient_Increase_Call struct {
	*mock.Call
}

// Increase is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *MockRedisClient_Expecter) Increase(ctx interface{}, key interface{}) *MockRedisClient_Increase_Call {
	return &MockRedisClient_Increase_Call{Call: _e.mock.On("Increase", ctx, key)}
}

func (_c *MockRedisClient_Increase_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_Increase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisClient_Increase_Call) Return(_a0 int64, _a1 error) *MockRedisClient_Increase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Publish provides a mock function with given fields: ctx, key, value
func (_m *MockRedisClient) Publish(ctx context.Context, key string, value interface{}) (int64, error) {
	ret := _m.Called(ctx, key, value)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) int64); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockRedisClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - value interface{}
func (_e *MockRedisClient_Expecter) Publish(ctx interface{}, key interface{}, value interface{}) *MockRedisClient_Publish_Call {
	return &MockRedisClient_Publish_Call{Call: _e.mock.On("Publish", ctx, key, value)}
}

func (_c *MockRedisClient_Publish_Call) Run(run func(ctx context.Context, key string, value interface{})) *MockRedisClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockRedisClient_Publish_Call) Return(_a0 int64, _a1 error) *MockRedisClient_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RemoveAllFromSet provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) RemoveAllFromSet(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_RemoveAllFromSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllFromSet'
type MockRedisClient_RemoveAllFromSet_Call struct {
	*mock.Call
}

// RemoveAllFromSet is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *MockRedisClient_Expecter) RemoveAllFromSet(ctx interface{}, key interface{}) *MockRedisClient_RemoveAllFromSet_Call {
	return &MockRedisClient_RemoveAllFromSet_Call{Call: _e.mock.On("RemoveAllFromSet", ctx, key)}
}

func (_c *MockRedisClient_RemoveAllFromSet_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_RemoveAllFromSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisClient_RemoveAllFromSet_Call) Return(_a0 int64, _a1 error) *MockRedisClient_RemoveAllFromSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RemoveAllFromSortedSet provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) RemoveAllFromSortedSet(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_RemoveAllFromSortedSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllFromSortedSet'
type MockRedisClient_RemoveAllFromSortedSet_Call struct {
	*mock.Call
}

// RemoveAllFromSortedSet is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *MockRedisClient_Expecter) RemoveAllFromSortedSet(ctx interface{}, key interface{}) *MockRedisClient_RemoveAllFromSortedSet_Call {
	return &MockRedisClient_RemoveAllFromSortedSet_Call{Call: _e.mock.On("RemoveAllFromSortedSet", ctx, key)}
}

func (_c *MockRedisClient_RemoveAllFromSortedSet_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_RemoveAllFromSortedSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisClient_RemoveAllFromSortedSet_Call) Return(_a0 int64, _a1 error) *MockRedisClient_RemoveAllFromSortedSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RemoveFromSet provides a mock function with given fields: ctx, key, values
func (_m *MockRedisClient) RemoveFromSet(ctx context.Context, key string, values ...interface{}) (int64, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) int64); ok {
		r0 = rf(ctx, key, values...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, key, values...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_RemoveFromSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFromSet'
type MockRedisClient_RemoveFromSet_Call struct {
	*mock.Call
}

// RemoveFromSet is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - values ...interface{}
func (_e *MockRedisClient_Expecter) RemoveFromSet(ctx interface{}, key interface{}, values ...interface{}) *MockRedisClient_RemoveFromSet_Call {
	return &MockRedisClient_RemoveFromSet_Call{Call: _e.mock.On("RemoveFromSet",
		append([]interface{}{ctx, key}, values...)...)}
}

func (_c *MockRedisClient_RemoveFromSet_Call) Run(run func(ctx context.Context, key string, values ...interface{})) *MockRedisClient_RemoveFromSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockRedisClient_RemoveFromSet_Call) Return(_a0 int64, _a1 error) *MockRedisClient_RemoveFromSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RemoveFromSortedSet provides a mock function with given fields: ctx, key, value
func (_m *MockRedisClient) RemoveFromSortedSet(ctx context.Context, key string, value interface{}) error {
	ret := _m.Called(ctx, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_RemoveFromSortedSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFromSortedSet'
type MockRedisClient_RemoveFromSortedSet_Call struct {
	*mock.Call
}

// RemoveFromSortedSet is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - value interface{}
func (_e *MockRedisClient_Expecter) RemoveFromSortedSet(ctx interface{}, key interface{}, value interface{}) *MockRedisClient_RemoveFromSortedSet_Call {
	return &MockRedisClient_RemoveFromSortedSet_Call{Call: _e.mock.On("RemoveFromSortedSet", ctx, key, value)}
}

func (_c *MockRedisClient_RemoveFromSortedSet_Call) Run(run func(ctx context.Context, key string, value interface{})) *MockRedisClient_RemoveFromSortedSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockRedisClient_RemoveFromSortedSet_Call) Return(_a0 error) *MockRedisClient_RemoveFromSortedSet_Call {
	_c.Call.Return(_a0)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value, duration
func (_m *MockRedisClient) Set(ctx context.Context, key string, value interface{}, duration time.Duration) error {
	ret := _m.Called(ctx, key, value, duration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, value, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockRedisClient_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - value interface{}
//  - duration time.Duration
func (_e *MockRedisClient_Expecter) Set(ctx interface{}, key interface{}, value interface{}, duration interface{}) *MockRedisClient_Set_Call {
	return &MockRedisClient_Set_Call{Call: _e.mock.On("Set", ctx, key, value, duration)}
}

func (_c *MockRedisClient_Set_Call) Run(run func(ctx context.Context, key string, value interface{}, duration time.Duration)) *MockRedisClient_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockRedisClient_Set_Call) Return(_a0 error) *MockRedisClient_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetJSON provides a mock function with given fields: ctx, key, value, duration
func (_m *MockRedisClient) SetJSON(ctx context.Context, key string, value interface{}, duration time.Duration) error {
	ret := _m.Called(ctx, key, value, duration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, value, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_SetJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJSON'
type MockRedisClient_SetJSON_Call struct {
	*mock.Call
}

// SetJSON is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
//  - value interface{}
//  - duration time.Duration
func (_e *MockRedisClient_Expecter) SetJSON(ctx interface{}, key interface{}, value interface{}, duration interface{}) *MockRedisClient_SetJSON_Call {
	return &MockRedisClient_SetJSON_Call{Call: _e.mock.On("SetJSON", ctx, key, value, duration)}
}

func (_c *MockRedisClient_SetJSON_Call) Run(run func(ctx context.Context, key string, value interface{}, duration time.Duration)) *MockRedisClient_SetJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockRedisClient_SetJSON_Call) Return(_a0 error) *MockRedisClient_SetJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

// SubscribeChannel provides a mock function with given fields: ctx, channels
func (_m *MockRedisClient) SubscribeChannel(ctx context.Context, channels ...string) <-chan *redis.Message {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 <-chan *redis.Message
	if rf, ok := ret.Get(0).(func(context.Context, ...string) <-chan *redis.Message); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *redis.Message)
		}
	}

	return r0
}

// MockRedisClient_SubscribeChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeChannel'
type MockRedisClient_SubscribeChannel_Call struct {
	*mock.Call
}

// SubscribeChannel is a helper method to define mock.On call
//  - ctx context.Context
//  - channels ...string
func (_e *MockRedisClient_Expecter) SubscribeChannel(ctx interface{}, channels ...interface{}) *MockRedisClient_SubscribeChannel_Call {
	return &MockRedisClient_SubscribeChannel_Call{Call: _e.mock.On("SubscribeChannel",
		append([]interface{}{ctx}, channels...)...)}
}

func (_c *MockRedisClient_SubscribeChannel_Call) Run(run func(ctx context.Context, channels ...string)) *MockRedisClient_SubscribeChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRedisClient_SubscribeChannel_Call) Return(_a0 <-chan *redis.Message) *MockRedisClient_SubscribeChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

// XAck provides a mock function with given fields: ctx, group, topic, ids
func (_m *MockRedisClient) XAck(ctx context.Context, group string, topic string, ids ...string) error {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, group, topic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) error); ok {
		r0 = rf(ctx, group, topic, ids...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_XAck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAck'
type MockRedisClient_XAck_Call struct {
	*mock.Call
}

// XAck is a helper method to define mock.On call
//  - ctx context.Context
//  - group string
//  - topic string
//  - ids ...string
func (_e *MockRedisClient_Expecter) XAck(ctx interface{}, group interface{}, topic interface{}, ids ...interface{}) *MockRedisClient_XAck_Call {
	return &MockRedisClient_XAck_Call{Call: _e.mock.On("XAck",
		append([]interface{}{ctx, group, topic}, ids...)...)}
}

func (_c *MockRedisClient_XAck_Call) Run(run func(ctx context.Context, group string, topic string, ids ...string)) *MockRedisClient_XAck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockRedisClient_XAck_Call) Return(_a0 error) *MockRedisClient_XAck_Call {
	_c.Call.Return(_a0)
	return _c
}

// XAdd provides a mock function with given fields: ctx, topic, values
func (_m *MockRedisClient) XAdd(ctx context.Context, topic string, values map[string]interface{}) error {
	ret := _m.Called(ctx, topic, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) error); ok {
		r0 = rf(ctx, topic, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_XAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XAdd'
type MockRedisClient_XAdd_Call struct {
	*mock.Call
}

// XAdd is a helper method to define mock.On call
//  - ctx context.Context
//  - topic string
//  - values map[string]interface{}
func (_e *MockRedisClient_Expecter) XAdd(ctx interface{}, topic interface{}, values interface{}) *MockRedisClient_XAdd_Call {
	return &MockRedisClient_XAdd_Call{Call: _e.mock.On("XAdd", ctx, topic, values)}
}

func (_c *MockRedisClient_XAdd_Call) Run(run func(ctx context.Context, topic string, values map[string]interface{})) *MockRedisClient_XAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockRedisClient_XAdd_Call) Return(_a0 error) *MockRedisClient_XAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

// XDel provides a mock function with given fields: ctx, topic, ids
func (_m *MockRedisClient) XDel(ctx context.Context, topic string, ids ...string) error {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, topic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, topic, ids...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_XDel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XDel'
type MockRedisClient_XDel_Call struct {
	*mock.Call
}

// XDel is a helper method to define mock.On call
//  - ctx context.Context
//  - topic string
//  - ids ...string
func (_e *MockRedisClient_Expecter) XDel(ctx interface{}, topic interface{}, ids ...interface{}) *MockRedisClient_XDel_Call {
	return &MockRedisClient_XDel_Call{Call: _e.mock.On("XDel",
		append([]interface{}{ctx, topic}, ids...)...)}
}

func (_c *MockRedisClient_XDel_Call) Run(run func(ctx context.Context, topic string, ids ...string)) *MockRedisClient_XDel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockRedisClient_XDel_Call) Return(_a0 error) *MockRedisClient_XDel_Call {
	_c.Call.Return(_a0)
	return _c
}

// XGroupCreateMkStream provides a mock function with given fields: ctx, topic, group
func (_m *MockRedisClient) XGroupCreateMkStream(ctx context.Context, topic string, group string) error {
	ret := _m.Called(ctx, topic, group)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, topic, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_XGroupCreateMkStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XGroupCreateMkStream'
type MockRedisClient_XGroupCreateMkStream_Call struct {
	*mock.Call
}

// XGroupCreateMkStream is a helper method to define mock.On call
//  - ctx context.Context
//  - topic string
//  - group string
func (_e *MockRedisClient_Expecter) XGroupCreateMkStream(ctx interface{}, topic interface{}, group interface{}) *MockRedisClient_XGroupCreateMkStream_Call {
	return &MockRedisClient_XGroupCreateMkStream_Call{Call: _e.mock.On("XGroupCreateMkStream", ctx, topic, group)}
}

func (_c *MockRedisClient_XGroupCreateMkStream_Call) Run(run func(ctx context.Context, topic string, group string)) *MockRedisClient_XGroupCreateMkStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRedisClient_XGroupCreateMkStream_Call) Return(_a0 error) *MockRedisClient_XGroupCreateMkStream_Call {
	_c.Call.Return(_a0)
	return _c
}

// XReadGroup provides a mock function with given fields: ctx, group, consumerID, topic
func (_m *MockRedisClient) XReadGroup(ctx context.Context, group string, consumerID string, topic string) ([]redis.XStream, error) {
	ret := _m.Called(ctx, group, consumerID, topic)

	var r0 []redis.XStream
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []redis.XStream); ok {
		r0 = rf(ctx, group, consumerID, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]redis.XStream)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, group, consumerID, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_XReadGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XReadGroup'
type MockRedisClient_XReadGroup_Call struct {
	*mock.Call
}

// XReadGroup is a helper method to define mock.On call
//  - ctx context.Context
//  - group string
//  - consumerID string
//  - topic string
func (_e *MockRedisClient_Expecter) XReadGroup(ctx interface{}, group interface{}, consumerID interface{}, topic interface{}) *MockRedisClient_XReadGroup_Call {
	return &MockRedisClient_XReadGroup_Call{Call: _e.mock.On("XReadGroup", ctx, group, consumerID, topic)}
}

func (_c *MockRedisClient_XReadGroup_Call) Run(run func(ctx context.Context, group string, consumerID string, topic string)) *MockRedisClient_XReadGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockRedisClient_XReadGroup_Call) Return(_a0 []redis.XStream, _a1 error) *MockRedisClient_XReadGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewMockRedisClient creates a new instance of MockRedisClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRedisClient(t testing.TB) *MockRedisClient {
	mock := &MockRedisClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
