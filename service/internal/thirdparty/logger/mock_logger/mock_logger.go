// Code generated by mockery v2.12.0. DO NOT EDIT.

package mock_logger

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockLogger is an autogenerated mock type for the ILogger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: ctx, message
func (_m *MockLogger) Debug(ctx context.Context, message string) {
	_m.Called(ctx, message)
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//  - ctx context.Context
//  - message string
func (_e *MockLogger_Expecter) Debug(ctx interface{}, message interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug", ctx, message)}
}

func (_c *MockLogger_Debug_Call) Run(run func(ctx context.Context, message string)) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

// Error provides a mock function with given fields: ctx, err
func (_m *MockLogger) Error(ctx context.Context, err error) {
	_m.Called(ctx, err)
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//  - ctx context.Context
//  - err error
func (_e *MockLogger_Expecter) Error(ctx interface{}, err interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error", ctx, err)}
}

func (_c *MockLogger_Error_Call) Run(run func(ctx context.Context, err error)) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(error))
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

// Info provides a mock function with given fields: ctx, message
func (_m *MockLogger) Info(ctx context.Context, message string) {
	_m.Called(ctx, message)
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//  - ctx context.Context
//  - message string
func (_e *MockLogger_Expecter) Info(ctx interface{}, message interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info", ctx, message)}
}

func (_c *MockLogger_Info_Call) Run(run func(ctx context.Context, message string)) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

// Level provides a mock function with given fields:
func (_m *MockLogger) Level() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockLogger_Level_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Level'
type MockLogger_Level_Call struct {
	*mock.Call
}

// Level is a helper method to define mock.On call
func (_e *MockLogger_Expecter) Level() *MockLogger_Level_Call {
	return &MockLogger_Level_Call{Call: _e.mock.On("Level")}
}

func (_c *MockLogger_Level_Call) Run(run func()) *MockLogger_Level_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogger_Level_Call) Return(_a0 string) *MockLogger_Level_Call {
	_c.Call.Return(_a0)
	return _c
}

// Panic provides a mock function with given fields: ctx, err
func (_m *MockLogger) Panic(ctx context.Context, err error) {
	_m.Called(ctx, err)
}

// MockLogger_Panic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panic'
type MockLogger_Panic_Call struct {
	*mock.Call
}

// Panic is a helper method to define mock.On call
//  - ctx context.Context
//  - err error
func (_e *MockLogger_Expecter) Panic(ctx interface{}, err interface{}) *MockLogger_Panic_Call {
	return &MockLogger_Panic_Call{Call: _e.mock.On("Panic", ctx, err)}
}

func (_c *MockLogger_Panic_Call) Run(run func(ctx context.Context, err error)) *MockLogger_Panic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(error))
	})
	return _c
}

func (_c *MockLogger_Panic_Call) Return() *MockLogger_Panic_Call {
	_c.Call.Return()
	return _c
}

// Warn provides a mock function with given fields: ctx, message
func (_m *MockLogger) Warn(ctx context.Context, message string) {
	_m.Called(ctx, message)
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//  - ctx context.Context
//  - message string
func (_e *MockLogger_Expecter) Warn(ctx interface{}, message interface{}) *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn", ctx, message)}
}

func (_c *MockLogger_Warn_Call) Run(run func(ctx context.Context, message string)) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return() *MockLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLogger(t testing.TB) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
