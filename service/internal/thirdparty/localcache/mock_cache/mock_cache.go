// Code generated by mockery v2.12.0. DO NOT EDIT.

package mock_cache

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockLocalCache is an autogenerated mock type for the ILocalCache type
type MockLocalCache struct {
	mock.Mock
}

type MockLocalCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocalCache) EXPECT() *MockLocalCache_Expecter {
	return &MockLocalCache_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: key
func (_m *MockLocalCache) Delete(key string) {
	_m.Called(key)
}

// MockLocalCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockLocalCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - key string
func (_e *MockLocalCache_Expecter) Delete(key interface{}) *MockLocalCache_Delete_Call {
	return &MockLocalCache_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *MockLocalCache_Delete_Call) Run(run func(key string)) *MockLocalCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLocalCache_Delete_Call) Return() *MockLocalCache_Delete_Call {
	_c.Call.Return()
	return _c
}

// DeleteSet provides a mock function with given fields: key
func (_m *MockLocalCache) DeleteSet(key string) {
	_m.Called(key)
}

// MockLocalCache_DeleteSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSet'
type MockLocalCache_DeleteSet_Call struct {
	*mock.Call
}

// DeleteSet is a helper method to define mock.On call
//  - key string
func (_e *MockLocalCache_Expecter) DeleteSet(key interface{}) *MockLocalCache_DeleteSet_Call {
	return &MockLocalCache_DeleteSet_Call{Call: _e.mock.On("DeleteSet", key)}
}

func (_c *MockLocalCache_DeleteSet_Call) Run(run func(key string)) *MockLocalCache_DeleteSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLocalCache_DeleteSet_Call) Return() *MockLocalCache_DeleteSet_Call {
	_c.Call.Return()
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockLocalCache) Get(key string) (interface{}, bool) {
	ret := _m.Called(key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockLocalCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockLocalCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - key string
func (_e *MockLocalCache_Expecter) Get(key interface{}) *MockLocalCache_Get_Call {
	return &MockLocalCache_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockLocalCache_Get_Call) Run(run func(key string)) *MockLocalCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLocalCache_Get_Call) Return(_a0 interface{}, _a1 bool) *MockLocalCache_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Increment provides a mock function with given fields: key, n
func (_m *MockLocalCache) Increment(key string, n int) {
	_m.Called(key, n)
}

// MockLocalCache_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type MockLocalCache_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//  - key string
//  - n int
func (_e *MockLocalCache_Expecter) Increment(key interface{}, n interface{}) *MockLocalCache_Increment_Call {
	return &MockLocalCache_Increment_Call{Call: _e.mock.On("Increment", key, n)}
}

func (_c *MockLocalCache_Increment_Call) Run(run func(key string, n int)) *MockLocalCache_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockLocalCache_Increment_Call) Return() *MockLocalCache_Increment_Call {
	_c.Call.Return()
	return _c
}

// Save provides a mock function with given fields: key, value
func (_m *MockLocalCache) Save(key string, value interface{}) {
	_m.Called(key, value)
}

// MockLocalCache_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockLocalCache_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//  - key string
//  - value interface{}
func (_e *MockLocalCache_Expecter) Save(key interface{}, value interface{}) *MockLocalCache_Save_Call {
	return &MockLocalCache_Save_Call{Call: _e.mock.On("Save", key, value)}
}

func (_c *MockLocalCache_Save_Call) Run(run func(key string, value interface{})) *MockLocalCache_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockLocalCache_Save_Call) Return() *MockLocalCache_Save_Call {
	_c.Call.Return()
	return _c
}

// SaveWithExpiration provides a mock function with given fields: key, value, t
func (_m *MockLocalCache) SaveWithExpiration(key string, value interface{}, t time.Duration) {
	_m.Called(key, value, t)
}

// MockLocalCache_SaveWithExpiration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveWithExpiration'
type MockLocalCache_SaveWithExpiration_Call struct {
	*mock.Call
}

// SaveWithExpiration is a helper method to define mock.On call
//  - key string
//  - value interface{}
//  - t time.Duration
func (_e *MockLocalCache_Expecter) SaveWithExpiration(key interface{}, value interface{}, t interface{}) *MockLocalCache_SaveWithExpiration_Call {
	return &MockLocalCache_SaveWithExpiration_Call{Call: _e.mock.On("SaveWithExpiration", key, value, t)}
}

func (_c *MockLocalCache_SaveWithExpiration_Call) Run(run func(key string, value interface{}, t time.Duration)) *MockLocalCache_SaveWithExpiration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockLocalCache_SaveWithExpiration_Call) Return() *MockLocalCache_SaveWithExpiration_Call {
	_c.Call.Return()
	return _c
}

// NewMockLocalCache creates a new instance of MockLocalCache. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLocalCache(t testing.TB) *MockLocalCache {
	mock := &MockLocalCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
