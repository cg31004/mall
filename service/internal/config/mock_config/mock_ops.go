// Code generated by mockery v2.12.0. DO NOT EDIT.

package mock_config

import (
	config "simon/mall/service/internal/config"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockOpsConfig is an autogenerated mock type for the IOpsConfig type
type MockOpsConfig struct {
	mock.Mock
}

type MockOpsConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOpsConfig) EXPECT() *MockOpsConfig_Expecter {
	return &MockOpsConfig_Expecter{mock: &_m.Mock}
}

// GetMySQLServiceConfig provides a mock function with given fields:
func (_m *MockOpsConfig) GetMySQLServiceConfig() config.MySQLServiceConfig {
	ret := _m.Called()

	var r0 config.MySQLServiceConfig
	if rf, ok := ret.Get(0).(func() config.MySQLServiceConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.MySQLServiceConfig)
	}

	return r0
}

// MockOpsConfig_GetMySQLServiceConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMySQLServiceConfig'
type MockOpsConfig_GetMySQLServiceConfig_Call struct {
	*mock.Call
}

// GetMySQLServiceConfig is a helper method to define mock.On call
func (_e *MockOpsConfig_Expecter) GetMySQLServiceConfig() *MockOpsConfig_GetMySQLServiceConfig_Call {
	return &MockOpsConfig_GetMySQLServiceConfig_Call{Call: _e.mock.On("GetMySQLServiceConfig")}
}

func (_c *MockOpsConfig_GetMySQLServiceConfig_Call) Run(run func()) *MockOpsConfig_GetMySQLServiceConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOpsConfig_GetMySQLServiceConfig_Call) Return(_a0 config.MySQLServiceConfig) *MockOpsConfig_GetMySQLServiceConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewMockOpsConfig creates a new instance of MockOpsConfig. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockOpsConfig(t testing.TB) *MockOpsConfig {
	mock := &MockOpsConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
