// Code generated by mockery v2.12.0. DO NOT EDIT.

package mock_repository

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	po "simon/mall/service/internal/model/po"

	testing "testing"
)

// MockMemberRepo is an autogenerated mock type for the IMemberRepo type
type MockMemberRepo struct {
	mock.Mock
}

type MockMemberRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMemberRepo) EXPECT() *MockMemberRepo_Expecter {
	return &MockMemberRepo_Expecter{mock: &_m.Mock}
}

// First provides a mock function with given fields: ctx, db, id
func (_m *MockMemberRepo) First(ctx context.Context, db *gorm.DB, id string) (*po.Member, error) {
	ret := _m.Called(ctx, db, id)

	var r0 *po.Member
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) *po.Member); ok {
		r0 = rf(ctx, db, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*po.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, string) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemberRepo_First_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'First'
type MockMemberRepo_First_Call struct {
	*mock.Call
}

// First is a helper method to define mock.On call
//  - ctx context.Context
//  - db *gorm.DB
//  - id string
func (_e *MockMemberRepo_Expecter) First(ctx interface{}, db interface{}, id interface{}) *MockMemberRepo_First_Call {
	return &MockMemberRepo_First_Call{Call: _e.mock.On("First", ctx, db, id)}
}

func (_c *MockMemberRepo_First_Call) Run(run func(ctx context.Context, db *gorm.DB, id string)) *MockMemberRepo_First_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(string))
	})
	return _c
}

func (_c *MockMemberRepo_First_Call) Return(_a0 *po.Member, _a1 error) *MockMemberRepo_First_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FirstByAccount provides a mock function with given fields: ctx, db, account
func (_m *MockMemberRepo) FirstByAccount(ctx context.Context, db *gorm.DB, account string) (*po.Member, error) {
	ret := _m.Called(ctx, db, account)

	var r0 *po.Member
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, string) *po.Member); ok {
		r0 = rf(ctx, db, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*po.Member)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, string) error); ok {
		r1 = rf(ctx, db, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemberRepo_FirstByAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstByAccount'
type MockMemberRepo_FirstByAccount_Call struct {
	*mock.Call
}

// FirstByAccount is a helper method to define mock.On call
//  - ctx context.Context
//  - db *gorm.DB
//  - account string
func (_e *MockMemberRepo_Expecter) FirstByAccount(ctx interface{}, db interface{}, account interface{}) *MockMemberRepo_FirstByAccount_Call {
	return &MockMemberRepo_FirstByAccount_Call{Call: _e.mock.On("FirstByAccount", ctx, db, account)}
}

func (_c *MockMemberRepo_FirstByAccount_Call) Run(run func(ctx context.Context, db *gorm.DB, account string)) *MockMemberRepo_FirstByAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(string))
	})
	return _c
}

func (_c *MockMemberRepo_FirstByAccount_Call) Return(_a0 *po.Member, _a1 error) *MockMemberRepo_FirstByAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewMockMemberRepo creates a new instance of MockMemberRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMemberRepo(t testing.TB) *MockMemberRepo {
	mock := &MockMemberRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
