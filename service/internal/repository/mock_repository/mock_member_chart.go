// Code generated by mockery v2.12.0. DO NOT EDIT.

package mock_repository

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	po "simon/mall/service/internal/model/po"

	testing "testing"
)

// MockMemberChartRepo is an autogenerated mock type for the IMemberChartRepo type
type MockMemberChartRepo struct {
	mock.Mock
}

type MockMemberChartRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMemberChartRepo) EXPECT() *MockMemberChartRepo_Expecter {
	return &MockMemberChartRepo_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, db, cond
func (_m *MockMemberChartRepo) Delete(ctx context.Context, db *gorm.DB, cond *po.MemberChartDel) error {
	ret := _m.Called(ctx, db, cond)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *po.MemberChartDel) error); ok {
		r0 = rf(ctx, db, cond)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemberChartRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMemberChartRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - db *gorm.DB
//  - cond *po.MemberChartDel
func (_e *MockMemberChartRepo_Expecter) Delete(ctx interface{}, db interface{}, cond interface{}) *MockMemberChartRepo_Delete_Call {
	return &MockMemberChartRepo_Delete_Call{Call: _e.mock.On("Delete", ctx, db, cond)}
}

func (_c *MockMemberChartRepo_Delete_Call) Run(run func(ctx context.Context, db *gorm.DB, cond *po.MemberChartDel)) *MockMemberChartRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*po.MemberChartDel))
	})
	return _c
}

func (_c *MockMemberChartRepo_Delete_Call) Return(_a0 error) *MockMemberChartRepo_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// First provides a mock function with given fields: ctx, db, cond
func (_m *MockMemberChartRepo) First(ctx context.Context, db *gorm.DB, cond *po.MemberChartFirst) (*po.MemberChart, error) {
	ret := _m.Called(ctx, db, cond)

	var r0 *po.MemberChart
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *po.MemberChartFirst) *po.MemberChart); ok {
		r0 = rf(ctx, db, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*po.MemberChart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *po.MemberChartFirst) error); ok {
		r1 = rf(ctx, db, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemberChartRepo_First_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'First'
type MockMemberChartRepo_First_Call struct {
	*mock.Call
}

// First is a helper method to define mock.On call
//  - ctx context.Context
//  - db *gorm.DB
//  - cond *po.MemberChartFirst
func (_e *MockMemberChartRepo_Expecter) First(ctx interface{}, db interface{}, cond interface{}) *MockMemberChartRepo_First_Call {
	return &MockMemberChartRepo_First_Call{Call: _e.mock.On("First", ctx, db, cond)}
}

func (_c *MockMemberChartRepo_First_Call) Run(run func(ctx context.Context, db *gorm.DB, cond *po.MemberChartFirst)) *MockMemberChartRepo_First_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*po.MemberChartFirst))
	})
	return _c
}

func (_c *MockMemberChartRepo_First_Call) Return(_a0 *po.MemberChart, _a1 error) *MockMemberChartRepo_First_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetList provides a mock function with given fields: ctx, db, cond
func (_m *MockMemberChartRepo) GetList(ctx context.Context, db *gorm.DB, cond *po.MemberChartSearch) ([]*po.MemberChart, error) {
	ret := _m.Called(ctx, db, cond)

	var r0 []*po.MemberChart
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *po.MemberChartSearch) []*po.MemberChart); ok {
		r0 = rf(ctx, db, cond)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*po.MemberChart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *po.MemberChartSearch) error); ok {
		r1 = rf(ctx, db, cond)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemberChartRepo_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MockMemberChartRepo_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//  - ctx context.Context
//  - db *gorm.DB
//  - cond *po.MemberChartSearch
func (_e *MockMemberChartRepo_Expecter) GetList(ctx interface{}, db interface{}, cond interface{}) *MockMemberChartRepo_GetList_Call {
	return &MockMemberChartRepo_GetList_Call{Call: _e.mock.On("GetList", ctx, db, cond)}
}

func (_c *MockMemberChartRepo_GetList_Call) Run(run func(ctx context.Context, db *gorm.DB, cond *po.MemberChartSearch)) *MockMemberChartRepo_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*po.MemberChartSearch))
	})
	return _c
}

func (_c *MockMemberChartRepo_GetList_Call) Return(_a0 []*po.MemberChart, _a1 error) *MockMemberChartRepo_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Insert provides a mock function with given fields: ctx, db, chart
func (_m *MockMemberChartRepo) Insert(ctx context.Context, db *gorm.DB, chart *po.MemberChart) error {
	ret := _m.Called(ctx, db, chart)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *po.MemberChart) error); ok {
		r0 = rf(ctx, db, chart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemberChartRepo_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockMemberChartRepo_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//  - ctx context.Context
//  - db *gorm.DB
//  - chart *po.MemberChart
func (_e *MockMemberChartRepo_Expecter) Insert(ctx interface{}, db interface{}, chart interface{}) *MockMemberChartRepo_Insert_Call {
	return &MockMemberChartRepo_Insert_Call{Call: _e.mock.On("Insert", ctx, db, chart)}
}

func (_c *MockMemberChartRepo_Insert_Call) Run(run func(ctx context.Context, db *gorm.DB, chart *po.MemberChart)) *MockMemberChartRepo_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*po.MemberChart))
	})
	return _c
}

func (_c *MockMemberChartRepo_Insert_Call) Return(_a0 error) *MockMemberChartRepo_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

// Update provides a mock function with given fields: ctx, db, cond
func (_m *MockMemberChartRepo) Update(ctx context.Context, db *gorm.DB, cond *po.MemberChartUpdate) error {
	ret := _m.Called(ctx, db, cond)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *po.MemberChartUpdate) error); ok {
		r0 = rf(ctx, db, cond)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemberChartRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMemberChartRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - db *gorm.DB
//  - cond *po.MemberChartUpdate
func (_e *MockMemberChartRepo_Expecter) Update(ctx interface{}, db interface{}, cond interface{}) *MockMemberChartRepo_Update_Call {
	return &MockMemberChartRepo_Update_Call{Call: _e.mock.On("Update", ctx, db, cond)}
}

func (_c *MockMemberChartRepo_Update_Call) Run(run func(ctx context.Context, db *gorm.DB, cond *po.MemberChartUpdate)) *MockMemberChartRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gorm.DB), args[2].(*po.MemberChartUpdate))
	})
	return _c
}

func (_c *MockMemberChartRepo_Update_Call) Return(_a0 error) *MockMemberChartRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewMockMemberChartRepo creates a new instance of MockMemberChartRepo. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMemberChartRepo(t testing.TB) *MockMemberChartRepo {
	mock := &MockMemberChartRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
